---
execute: 
  echo: false
  
html:
  embed-resources: true
  page-layout: full
  knitr:
    opts_chunk: 
      fig-width: 8.5
      fig-height: 11
      digits: 7
      
# params:
#   river: "Santa Fe River"
#   target: "Community"
#   year: 2024
  
# params:
#   river: "Suwannee River"
#   target: "Community"
#   year: 2057

params:
  river: "Ocklawaha River"
  target: "Community"
  year: 2099
  data: "data/csv/Ocklawaha_sites_all.csv"
  column_mapping: 'list(Latitude = "Y",
                        ident = "FID_1_1",
                        Longitude = "X",
                        Habitat = "Habitat",
                        Zone = "River.Segment",
                        Grid = "GRID",
                        Waterbody = "REGION",
                        Minigrid = "Minigrid")'
---


```{r}
#| include: false

parameters <- params

if("column_mapping" %in% names(parameters)) {
  parameters$column_mapping <- eval(parse(text = parameters$column_mapping))
}

if(Sys.getenv("RSTUDIO_CHILD_PROCESS_PANE") == "" &
   "data" %in% names(parameters)) {
  parameters$data = paste("../", parameters$data, sep = "")
}

# Waterbody = character(),
#           type = character(),
#           ident = character(),
#           Latitude = numeric(),
#           Longitude = numeric(),
#           Habitat = character(),
#           Zone = integer(),
#           Grid = integer(),
#           Minigrid = integer(),
#           Exclude = logical())


title = paste(parameters$river, parameters$target, parameters$year, sep=" ")
out_dir = "_output"
file_name = stringr::str_replace_all(paste(parameters$river, parameters$target, parameters$year, sep="_")," ", "_")
source("R/ltm_site_selection.R")
```

::: {.title .h1}

`r paste(title,"Site List", sep = " ")`

:::

```{r setup}
#| include: true
#| eval: true
if(!is.null(parameters$data)) {
  ltm_sites <- 
    format_siteList(
      parameters$data,
      column_mapping = parameters$column_mapping,
      column_fill = list(Waterbody = parameters$river),
      method = site_selection_method)
}

```


```{r select-random-sites}

rand_sites = random_sites(waterbody = parameters$river, sitelist = ltm_sites)

```

```{r create-gpx}
#| eval: true
#| warning: false
#| message: false

gpx_dir <- paste(out_dir,"/gpx/", sep="")
gpx_path <- paste(gpx_dir, file_name,".gpx", sep="")
if(!dir.exists(gpx_dir)) {
  dir.create(gpx_dir)
}

pt_data <- 
  rand_sites %>% 
  mutate(flag = ifelse(selection == "Primary", # create unique symbols for primary and alt sites
                       "Navaid, Green",  
                       "Navaid, Red")) %>% 
 select(ident, flag)



rand_sites_gpx <- create_gpx(gpx_format(rand_sites), gpx_path, output = FALSE) %>% 
  add_gpx_data(gpx_file = .,
               insert_data = pt_data,
               tagSchema = c("name" = "ident", "sym" = "flag"))


writeLines(rand_sites_gpx, gpx_path)

```

```{r create-basemap}
#| eval: true
#| include: false
#| warning: false
#| message: false

basemap = import_rivermap("data/shapefiles/rivers.shp", parameters$river)

# # 
map_dir = paste(out_dir,"/maps/", sep="")
if(!dir.exists(map_dir)) {
  dir.create(map_dir)
}
sitemap = plot_sitemap(basemap,
                         rand_sites,
                         point_size = 5,
                         map_title = title,
                         save.to.file = TRUE,
                         file_name = paste(map_dir, file_name, sep=""))
```

```{r sitelist}
#| eval: true
#| results: asis
#| echo: false
rand_sites <- 
  rand_sites %>% 
  arrange(ident) 

for(x in 1:length(levels(rand_sites$Zone))){
  
  tab <- if(site_selection_method == "center-line") {
    rand_sites %>% 
      filter(Zone == levels(rand_sites$Zone)[[x]]) %>%
      dplyr::select(Site = ident, 
                    Longitude,
                    Latitude, 
                    Segment = Zone, 
                    Selection = selection)
    } else if(site_selection_method == "grid") {
      rand_sites %>% 
                     filter(Zone == levels(rand_sites$Zone)[[x]]) %>%
                     dplyr::select(Site = ident, 
                                   Longitude,
                                   Latitude, 
                                   Segment = Zone,
                                   Grid,
                                   Minigrid,
                                   Type = Habitat,
                                   Selection = selection)
      }
knitr::kable(
  tab %>% 
  dplyr::mutate_at(c("Longitude","Latitude"), ~base::format(.,digits = 7)),
                   format= "html", 
                   aption = paste("Segment:",levels(rand_sites$Zone)[[x]], sep=" "),
                   booktabs = TRUE,
                   longtable = TRUE, 
                   align = "c") %>%
    kableExtra::kable_paper("hover", full_width = F) %>% 
    kableExtra::kable_styling(latex_options = c("hold_position"), font_size = 14) %>%
    kableExtra::row_spec(which(tab$Selection == "Alternate"), background = "#ECECEC") %>% 
  print()
}
```

```{r sitemap}
#| eval: true
#| include: true
#| echo: false
#| warning: false
##| out-extra=ifelse(parameters$rotate_map,"angle=270","angle=0")  
 print(sitemap)
```
